include another_file.hbc;

endpoint device_descriptor {
  access { read };
  datatype UINT32;
  eid 0;
}

endpoint on {
  access { read, write };
  datatype BOOL;
  eid 1;
}

endpoint power {
  eid 2;
  datatype UINT32; access { read, broadcast };
}

alias device {
  ip fe80::cafe:d00d;
  eids { 1, 2, 3 };
}

alias another_device {
  ip ::99;
  eids { 1,2,3,4,5 };
}

machine my_machine {
  states { init, one, two, three };
  in(one) {
    if(device.endpoint == 23) {
      write device.other_endpoint := 42;
      goto two;
    }
  }
  in(two) {
    if(device.endpoint == 23) {
      goto three;
    }
    if(device.endpoint == 25) {
      write blah.blaah := 0;
      goto three;
    }
    else {
      write foo.bar := 1;
      goto one;
    }
  }
}

machine another_machine {
  states { init, bloerp };
  in(bloerp) {
    if(true) { goto bloerp; }
    else if(true) { goto bloerp; }
    else if(true) { goto bloerp; }
    else { goto bloerp; }
  }

  in(bloerp) { }
}

# example machine from the "example.hbc" - minus everything we can't parse yet
machine main {
  states { init };
  in(init)
  {
    if((sensorbox.temperature < i4294967292) && ((sensorbox.temperature != 7.35) || (device.endpoint == 98765))) {
      write heater.heater := 100;
      goto init;
    } else if(sensorbox.temperature >= 19) {
      write heater.heater := 50;
      goto init;
    } else {
      write heater.heater := 0;
      goto init;
    }
  }
}

module toggle($DEVICE, $ENDPOINT, $VALUE, $TARGETDEV, $TARGETEP) {
  states { init, power_on, power_off };
  in(init) {
    if(true) {
      write $TARGETDEV.$TARGETEP := 1;
      goto power_on;
    }
  }
  in(power_on) {
    if($DEVICE.$ENDPOINT == $VALUE) {
      write $TARGETDEV.$TARGETEP := 0;
      goto power_off;
    }
  }
  in(power_off) {
    if($DEVICE.$ENDPOINT == $VALUE) {
      write $TARGETDEV.$TARGETEP := 1;
      goto power_on;
    }
  }
}

module error($A, $B) {
  states { init, nope };
  in(init) {
    if(true) { goto init; }
    else if(true) { goto init; }
    else if(true) { goto init; }
    else { goto nope; }
  }
  in(nope) {
    if($A.$A == 5) { # TODO "true" does not work as constant here
      goto nope;
    } else {
      goto nope;
    }
  }
}

instance my_error : error(device, another_endpoint);
instance more_error : error(device, on);
instance the_toggle : toggle(device, power, 5, another_device, on);

