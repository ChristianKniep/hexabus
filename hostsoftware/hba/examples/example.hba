# Hexabus Assembler example program

# First the IP address of the target device, it's name and
# a state machine ID (used for the auto-reset mechanism) have
# to be defined
target caca:0000:0000:0000:0050:c4ff:fe04:83af;
device_name my_plug;
machine 41f984bb082af806e510740db289125d;

# this gives the name of the initial state
startstate state_0_0;

# define a set of conditions
# normal conditions have an IP (in this case, localhost)
# an endpoint ID and a value (with comparison operator)
condition cond_0_0 {
  ip := 0000:0000:0000:0000:0000:0000:0000:0001;
  eid := 4;
  value == 1;
}

condition cond_0_1 {
  ip := 0000:0000:0000:0000:0000:0000:0000:0001;
  eid := 4;
  value == 1;
}

# this is a timeout condition. It is true after a machine has remained
# in a state for longer than the given number of seconds.
condition cond_0_2 {
  timeout := 1200;
}

# now follow the state definitions
# each if-block is an outgoing transition
state state_0_0 {
  if cond_0_0 {
    set 1 := 1;
    goodstate state_0_1;
    badstate state_0_1;
  }
}

# This is a state with two outgoing transitions.
state state_0_1 {
  if cond_0_1 {
    set 1 := 0; # set endpoint 1 to value 0.
    goodstate state_0_0; # goto state_0_0 if writing succeeds
    badstate state_0_0; # goto state_0_0 if writing fails
  }
  if cond_0_2 {
    set 1 := 0;
    goodstate state_0_0;
    badstate state_0_0;
  }
}

# there can also be "true" conditions, which do not require a condition block
# (a state with a true condition is immediately left, and the action is executed)
# state state_0_2 {
#   if true {
#     set 1 := 0;
#     goodstate state_0_0;
#     badstate state_0_0;
#   }
# }
